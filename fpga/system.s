// ------------------------------------------------------------------
// Initiate
// ------------------------------------------------------------------

// Reset All Data Memory
x10 = 0
x1 = 411700
while x10 != x1,
    mem[x10 + 0] = x0
    x10 = x10 + 1
endwhile

// initiate huffman table Y C
x1 = 0 + x0
x2 = 250 + x0
x3 = 16 + x0
x4 = 0 + x0
x5 = 11 + x0
x6 = 16 + x0
while x2 >= x1,
    mem[x1 + 275] = x0
    mem[x1 + 801] = x0
    x7 = 1 + x0
    while x7 < x5,
        x8 = x7 + x1
        mem[x8 + 275] = x3
        mem[x8 + 801] = x3
        x7 = x7 + 1
    endwhile
    while x7 < x6,
        x8 = x7 + x1
        mem[x8 + 275] = x0
        mem[x8 + 801] = x0
        x7 = x7 + 1
    endwhile
    x1 = x1 + 16
endwhile

// initiate quantization table
x1 = 1052 + x0
x2 = 1179 + x0
x3 = 65536
while x2 >= x1,
    mem[x1 + 0] = x3
    x1 = x1 + 1
endwhile

define // JPEG parameters load to memory file
    1    <- 2
    2    <- 3
    3    <- 4
    4    <- 5
    5    <- 6
    6    <- 14
    7    <- 30
    8    <- 62
    9    <- 126
    10   <- 254
    11   <- 510
    12   <- 2
    13   <- 3
    14   <- 3
    15   <- 3
    16   <- 3
    17   <- 3
    18   <- 4
    19   <- 5
    20   <- 6
    21   <- 7
    22   <- 8
    23   <- 9
    24   <- 10
    26   <- 1
    27   <- 4
    28   <- 11
    29   <- 26
    30   <- 120
    31   <- 248
    32   <- 1014
    33   <- 65410
    34   <- 65411
    41   <- 12
    42   <- 27
    43   <- 121
    44   <- 502
    45   <- 2038
    46   <- 65412
    47   <- 65413
    48   <- 65414
    49   <- 65415
    50   <- 65416
    57   <- 28
    58   <- 249
    59   <- 1015
    60   <- 4084
    61   <- 65417
    62   <- 65418
    63   <- 65419
    64   <- 65420
    65   <- 65421
    66   <- 65422
    73   <- 58
    74   <- 503
    75   <- 4085
    76   <- 65423
    77   <- 65424
    78   <- 65425
    79   <- 65426
    80   <- 65427
    81   <- 65428
    82   <- 65429
    89   <- 59
    90   <- 1016
    91   <- 65430
    92   <- 65431
    93   <- 65432
    94   <- 65433
    95   <- 65434
    96   <- 65435
    97   <- 65436
    98   <- 65437
    105  <- 122
    106  <- 2039
    107  <- 65438
    108  <- 65439
    109  <- 65440
    110  <- 65441
    111  <- 65442
    112  <- 65443
    113  <- 65444
    114  <- 65445
    121  <- 123
    122  <- 4086
    123  <- 65446
    124  <- 65447
    125  <- 65448
    126  <- 65449
    127  <- 65450
    128  <- 65451
    129  <- 65452
    130  <- 65453
    137  <- 250
    138  <- 4087
    139  <- 65454
    140  <- 65455
    141  <- 65456
    142  <- 65457
    143  <- 65458
    144  <- 65459
    145  <- 65460
    146  <- 65461
    153  <- 504
    154  <- 32704
    155  <- 65462
    156  <- 65463
    157  <- 65464
    158  <- 65465
    159  <- 65466
    160  <- 65467
    161  <- 65468
    162  <- 65469
    169  <- 505
    170  <- 65470
    171  <- 65471
    172  <- 65472
    173  <- 65473
    174  <- 65474
    175  <- 65475
    176  <- 65476
    177  <- 65477
    178  <- 65478
    185  <- 506
    186  <- 65479
    187  <- 65480
    188  <- 65481
    189  <- 65482
    190  <- 65483
    191  <- 65484
    192  <- 65485
    193  <- 65486
    194  <- 65487
    201  <- 1017
    202  <- 65488
    203  <- 65489
    204  <- 65490
    205  <- 65491
    206  <- 65492
    207  <- 65493
    208  <- 65494
    209  <- 65495
    210  <- 65496
    217  <- 1018
    218  <- 65497
    219  <- 65498
    220  <- 65499
    221  <- 65500
    222  <- 65501
    223  <- 65502
    224  <- 65503
    225  <- 65504
    226  <- 65505
    233  <- 2040
    234  <- 65506
    235  <- 65507
    236  <- 65508
    237  <- 65509
    238  <- 65510
    239  <- 65511
    240  <- 65512
    241  <- 65513
    242  <- 65514
    249  <- 65515
    250  <- 65516
    251  <- 65517
    252  <- 65518
    253  <- 65519
    254  <- 65520
    255  <- 65521
    256  <- 65522
    257  <- 65523
    258  <- 65524
    264  <- 2041
    265  <- 65525
    266  <- 65526
    267  <- 65527
    268  <- 65528
    269  <- 65529
    270  <- 65530
    271  <- 65531
    272  <- 65532
    273  <- 65533
    274  <- 65534
    275  <- 4
    276  <- 2
    277  <- 2
    278  <- 3
    279  <- 4
    280  <- 5
    281  <- 7
    282  <- 8
    283  <- 10
    292  <- 4
    293  <- 5
    294  <- 7
    295  <- 9
    296  <- 11
    308  <- 5
    309  <- 8
    310  <- 10
    311  <- 12
    324  <- 6
    325  <- 9
    326  <- 12
    340  <- 6
    341  <- 10
    356  <- 7
    357  <- 11
    372  <- 7
    373  <- 12
    388  <- 8
    389  <- 12
    404  <- 9
    405  <- 15
    420  <- 9
    436  <- 9
    452  <- 10
    468  <- 10
    484  <- 11
    515  <- 11
    527  <- 1
    528  <- 2
    529  <- 6
    530  <- 14
    531  <- 30
    532  <- 62
    533  <- 126
    534  <- 254
    535  <- 510
    536  <- 1022
    537  <- 2046
    538  <- 2
    539  <- 2
    540  <- 2
    541  <- 3
    542  <- 4
    543  <- 5
    544  <- 6
    545  <- 7
    546  <- 8
    547  <- 9
    548  <- 10
    549  <- 11
    551  <- 1
    552  <- 4
    553  <- 10
    554  <- 24
    555  <- 25
    556  <- 56
    557  <- 120
    558  <- 500
    559  <- 1014
    560  <- 4084
    567  <- 11
    568  <- 57
    569  <- 246
    570  <- 501
    571  <- 2038
    572  <- 4085
    573  <- 65416
    574  <- 65417
    575  <- 65418
    576  <- 65419
    583  <- 26
    584  <- 247
    585  <- 1015
    586  <- 4086
    587  <- 32706
    588  <- 65420
    589  <- 65421
    590  <- 65422
    591  <- 65423
    592  <- 65424
    599  <- 27
    600  <- 248
    601  <- 1016
    602  <- 4087
    603  <- 65425
    604  <- 65426
    605  <- 65427
    606  <- 65428
    607  <- 65429
    608  <- 65430
    615  <- 58
    616  <- 502
    617  <- 65431
    618  <- 65432
    619  <- 65433
    620  <- 65434
    621  <- 65435
    622  <- 65436
    623  <- 65437
    624  <- 65438
    631  <- 59
    632  <- 1017
    633  <- 65439
    634  <- 65440
    635  <- 65441
    636  <- 65442
    637  <- 65443
    638  <- 65444
    639  <- 65445
    640  <- 65446
    647  <- 121
    648  <- 2039
    649  <- 65447
    650  <- 65448
    651  <- 65449
    652  <- 65450
    653  <- 65451
    654  <- 65452
    655  <- 65453
    656  <- 65454
    663  <- 122
    664  <- 2040
    665  <- 65455
    666  <- 65456
    667  <- 65457
    668  <- 65458
    669  <- 65459
    670  <- 65460
    671  <- 65461
    672  <- 65462
    679  <- 249
    680  <- 65463
    681  <- 65464
    682  <- 65465
    683  <- 65466
    684  <- 65467
    685  <- 65468
    686  <- 65469
    687  <- 65470
    688  <- 65471
    695  <- 503
    696  <- 65472
    697  <- 65473
    698  <- 65474
    699  <- 65475
    700  <- 65476
    701  <- 65477
    702  <- 65478
    703  <- 65479
    704  <- 65480
    711  <- 504
    712  <- 65481
    713  <- 65482
    714  <- 65483
    715  <- 65484
    716  <- 65485
    717  <- 65486
    718  <- 65487
    719  <- 65488
    720  <- 65489
    727  <- 505
    728  <- 65490
    729  <- 65491
    730  <- 65492
    731  <- 65493
    732  <- 65494
    733  <- 65495
    734  <- 65496
    735  <- 65497
    736  <- 65498
    743  <- 506
    744  <- 65499
    745  <- 65500
    746  <- 65501
    747  <- 65502
    748  <- 65503
    749  <- 65504
    750  <- 65505
    751  <- 65506
    752  <- 65507
    759  <- 2041
    760  <- 65508
    761  <- 65509
    762  <- 65510
    763  <- 65511
    764  <- 65512
    765  <- 65513
    766  <- 65514
    767  <- 65515
    768  <- 65516
    775  <- 16352
    776  <- 65517
    777  <- 65518
    778  <- 65519
    779  <- 65520
    780  <- 65521
    781  <- 65522
    782  <- 65523
    783  <- 65524
    784  <- 65525
    790  <- 1018
    791  <- 32707
    792  <- 65526
    793  <- 65527
    794  <- 65528
    795  <- 65529
    796  <- 65530
    797  <- 65531
    798  <- 65532
    799  <- 65533
    800  <- 65534
    801  <- 2
    802  <- 2
    803  <- 3
    804  <- 4
    805  <- 5
    806  <- 5
    807  <- 6
    808  <- 7
    809  <- 9
    810  <- 10
    811  <- 12
    818  <- 4
    819  <- 6
    820  <- 8
    821  <- 9
    822  <- 11
    823  <- 12
    834  <- 5
    835  <- 8
    836  <- 10
    837  <- 12
    838  <- 15
    850  <- 5
    851  <- 8
    852  <- 10
    853  <- 12
    866  <- 6
    867  <- 9
    882  <- 6
    883  <- 10
    898  <- 7
    899  <- 11
    914  <- 7
    915  <- 11
    930  <- 8
    946  <- 9
    962  <- 9
    978  <- 9
    994  <- 9
    1010 <- 11
    1026 <- 14
    1041 <- 10
    1042 <- 15
    1180 <- 51471
    1181 <- 30385
    1182 <- 16054
    1183 <- 8149
    1184 <- 4090
    1185 <- 2047
    1186 <- 1023
    1198 <- 46341
    1199 <- 65536
    1200 <- 12868
    1208 <- 551903297
    1209 <- 1211180777
    1210 <- 210453397
    1211 <- -317827579
    1212 <- -624917741
    1213 <- 942745321
    1214 <- -790273982
    1215 <- -152471339

endefine

define // Pixel bit map define here
    50000 <- 32
    50001 <- 32
    50002 <- 16711680
    50003 <- 16711680
    50004 <- 16711680
    50005 <- 16711680
    50006 <- 16711680
    50007 <- 16711680
    50008 <- 16711680
    50009 <- 16711680
    50010 <- 16711680
    50011 <- 16711680
    50012 <- 16711680
    50013 <- 16711680
    50014 <- 16711680
    50015 <- 16711680
    50016 <- 16711680
    50017 <- 16711680
    50018 <- 16777215
    50019 <- 16777215
    50020 <- 16777215
    50021 <- 16777215
    50022 <- 16777215
    50023 <- 16777215
    50024 <- 16777215
    50025 <- 16777215
    50026 <- 986895
    50027 <- 986895
    50028 <- 986895
    50029 <- 986895
    50030 <- 986895
    50031 <- 986895
    50032 <- 986895
    50033 <- 986895
    50034 <- 16711680
    50035 <- 16711680
    50036 <- 16711680
    50037 <- 16711680
    50038 <- 16711680
    50039 <- 16711680
    50040 <- 16711680
    50041 <- 16711680
    50042 <- 16711680
    50043 <- 16711680
    50044 <- 16711680
    50045 <- 16711680
    50046 <- 16711680
    50047 <- 16711680
    50048 <- 16711680
    50049 <- 16711680
    50050 <- 16777215
    50051 <- 16777215
    50052 <- 16777215
    50053 <- 16777215
    50054 <- 16777215
    50055 <- 16777215
    50056 <- 16777215
    50057 <- 16777215
    50058 <- 986895
    50059 <- 986895
    50060 <- 986895
    50061 <- 986895
    50062 <- 16777215
    50063 <- 986895
    50064 <- 986895
    50065 <- 986895
    50066 <- 16711680
    50067 <- 16711680
    50068 <- 16711680
    50069 <- 16711680
    50070 <- 16711680
    50071 <- 16711680
    50072 <- 16711680
    50073 <- 16711680
    50074 <- 16711680
    50075 <- 16711680
    50076 <- 16711680
    50077 <- 16711680
    50078 <- 16711680
    50079 <- 16711680
    50080 <- 16711680
    50081 <- 16711680
    50082 <- 16777215
    50083 <- 16777215
    50084 <- 16777215
    50085 <- 16777215
    50086 <- 16777215
    50087 <- 16777215
    50088 <- 16777215
    50089 <- 16777215
    50090 <- 986895
    50091 <- 986895
    50092 <- 986895
    50093 <- 986895
    50094 <- 986895
    50095 <- 16777215
    50096 <- 986895
    50097 <- 986895
    50098 <- 16711680
    50099 <- 16711680
    50100 <- 16711680
    50101 <- 16711680
    50102 <- 16711680
    50103 <- 16711680
    50104 <- 16711680
    50105 <- 16711680
    50106 <- 16711680
    50107 <- 16711680
    50108 <- 16711680
    50109 <- 16711680
    50110 <- 16711680
    50111 <- 16711680
    50112 <- 16711680
    50113 <- 16711680
    50114 <- 16777215
    50115 <- 16777215
    50116 <- 16777215
    50117 <- 16777215
    50118 <- 16777215
    50119 <- 16777215
    50120 <- 16777215
    50121 <- 16777215
    50122 <- 986895
    50123 <- 16777215
    50124 <- 16777215
    50125 <- 16777215
    50126 <- 16777215
    50127 <- 16777215
    50128 <- 16777215
    50129 <- 986895
    50130 <- 16711680
    50131 <- 16711680
    50132 <- 16711680
    50133 <- 16711680
    50134 <- 16711680
    50135 <- 16711680
    50136 <- 16711680
    50137 <- 16711680
    50138 <- 16711680
    50139 <- 16711680
    50140 <- 16711680
    50141 <- 16711680
    50142 <- 16711680
    50143 <- 16711680
    50144 <- 16711680
    50145 <- 16711680
    50146 <- 16777215
    50147 <- 16777215
    50148 <- 16777215
    50149 <- 16777215
    50150 <- 16777215
    50151 <- 16777215
    50152 <- 16777215
    50153 <- 16777215
    50154 <- 986895
    50155 <- 16777215
    50156 <- 16777215
    50157 <- 16777215
    50158 <- 16777215
    50159 <- 16777215
    50160 <- 16777215
    50161 <- 986895
    50162 <- 16711680
    50163 <- 16711680
    50164 <- 16711680
    50165 <- 16711680
    50166 <- 16711680
    50167 <- 16711680
    50168 <- 16711680
    50169 <- 16711680
    50170 <- 16711680
    50171 <- 16711680
    50172 <- 16711680
    50173 <- 16711680
    50174 <- 16711680
    50175 <- 16711680
    50176 <- 16711680
    50177 <- 16711680
    50178 <- 16777215
    50179 <- 16777215
    50180 <- 16777215
    50181 <- 16777215
    50182 <- 16777215
    50183 <- 16777215
    50184 <- 16777215
    50185 <- 16777215
    50186 <- 986895
    50187 <- 986895
    50188 <- 986895
    50189 <- 986895
    50190 <- 986895
    50191 <- 16777215
    50192 <- 986895
    50193 <- 986895
    50194 <- 16711680
    50195 <- 16711680
    50196 <- 16711680
    50197 <- 16711680
    50198 <- 16711680
    50199 <- 16711680
    50200 <- 16711680
    50201 <- 16711680
    50202 <- 16711680
    50203 <- 16711680
    50204 <- 16711680
    50205 <- 16711680
    50206 <- 16711680
    50207 <- 16711680
    50208 <- 16711680
    50209 <- 16711680
    50210 <- 16777215
    50211 <- 16777215
    50212 <- 16777215
    50213 <- 16777215
    50214 <- 16777215
    50215 <- 16777215
    50216 <- 16777215
    50217 <- 16777215
    50218 <- 986895
    50219 <- 986895
    50220 <- 986895
    50221 <- 986895
    50222 <- 16777215
    50223 <- 986895
    50224 <- 986895
    50225 <- 986895
    50226 <- 16711680
    50227 <- 16711680
    50228 <- 16711680
    50229 <- 16711680
    50230 <- 16711680
    50231 <- 16711680
    50232 <- 16711680
    50233 <- 16711680
    50234 <- 16711680
    50235 <- 16711680
    50236 <- 16711680
    50237 <- 16711680
    50238 <- 16711680
    50239 <- 16711680
    50240 <- 16711680
    50241 <- 16711680
    50242 <- 16777215
    50243 <- 16777215
    50244 <- 16777215
    50245 <- 16777215
    50246 <- 16777215
    50247 <- 16777215
    50248 <- 16777215
    50249 <- 16777215
    50250 <- 986895
    50251 <- 986895
    50252 <- 986895
    50253 <- 986895
    50254 <- 986895
    50255 <- 986895
    50256 <- 986895
    50257 <- 986895
    50258 <- 16711680
    50259 <- 16711680
    50260 <- 16711680
    50261 <- 16711680
    50262 <- 16711680
    50263 <- 16711680
    50264 <- 16711680
    50265 <- 16711680
    50266 <- 16711680
    50267 <- 16711680
    50268 <- 16711680
    50269 <- 16711680
    50270 <- 16711680
    50271 <- 16711680
    50272 <- 16711680
    50273 <- 16711680
    50274 <- 986895
    50275 <- 986895
    50276 <- 986895
    50277 <- 986895
    50278 <- 986895
    50279 <- 986895
    50280 <- 986895
    50281 <- 986895
    50282 <- 16777215
    50283 <- 16777215
    50284 <- 16777215
    50285 <- 16777215
    50286 <- 16777215
    50287 <- 16777215
    50288 <- 16777215
    50289 <- 16777215
    50290 <- 16711680
    50291 <- 16711680
    50292 <- 16711680
    50293 <- 16711680
    50294 <- 16711680
    50295 <- 16711680
    50296 <- 16711680
    50297 <- 16711680
    50298 <- 16711680
    50299 <- 16711680
    50300 <- 16711680
    50301 <- 16711680
    50302 <- 16711680
    50303 <- 16711680
    50304 <- 16711680
    50305 <- 16711680
    50306 <- 986895
    50307 <- 986895
    50308 <- 986895
    50309 <- 16777215
    50310 <- 986895
    50311 <- 986895
    50312 <- 986895
    50313 <- 986895
    50314 <- 16777215
    50315 <- 16777215
    50316 <- 16777215
    50317 <- 16777215
    50318 <- 16777215
    50319 <- 16777215
    50320 <- 16777215
    50321 <- 16777215
    50322 <- 16711680
    50323 <- 16711680
    50324 <- 16711680
    50325 <- 16711680
    50326 <- 16711680
    50327 <- 16711680
    50328 <- 16711680
    50329 <- 16711680
    50330 <- 16711680
    50331 <- 16711680
    50332 <- 16711680
    50333 <- 16711680
    50334 <- 16711680
    50335 <- 16711680
    50336 <- 16711680
    50337 <- 16711680
    50338 <- 986895
    50339 <- 986895
    50340 <- 16777215
    50341 <- 986895
    50342 <- 986895
    50343 <- 986895
    50344 <- 986895
    50345 <- 986895
    50346 <- 16777215
    50347 <- 16777215
    50348 <- 16777215
    50349 <- 16777215
    50350 <- 16777215
    50351 <- 16777215
    50352 <- 16777215
    50353 <- 16777215
    50354 <- 16711680
    50355 <- 16711680
    50356 <- 16711680
    50357 <- 16711680
    50358 <- 16711680
    50359 <- 16711680
    50360 <- 16711680
    50361 <- 16711680
    50362 <- 16711680
    50363 <- 16711680
    50364 <- 16711680
    50365 <- 16711680
    50366 <- 16711680
    50367 <- 16711680
    50368 <- 16711680
    50369 <- 16711680
    50370 <- 986895
    50371 <- 16777215
    50372 <- 16777215
    50373 <- 16777215
    50374 <- 16777215
    50375 <- 16777215
    50376 <- 16777215
    50377 <- 986895
    50378 <- 16777215
    50379 <- 16777215
    50380 <- 16777215
    50381 <- 16777215
    50382 <- 16777215
    50383 <- 16777215
    50384 <- 16777215
    50385 <- 16777215
    50386 <- 16711680
    50387 <- 16711680
    50388 <- 16711680
    50389 <- 16711680
    50390 <- 16711680
    50391 <- 16711680
    50392 <- 16711680
    50393 <- 16711680
    50394 <- 16711680
    50395 <- 16711680
    50396 <- 16711680
    50397 <- 16711680
    50398 <- 16711680
    50399 <- 16711680
    50400 <- 16711680
    50401 <- 16711680
    50402 <- 986895
    50403 <- 16777215
    50404 <- 16777215
    50405 <- 16777215
    50406 <- 16777215
    50407 <- 16777215
    50408 <- 16777215
    50409 <- 986895
    50410 <- 16777215
    50411 <- 16777215
    50412 <- 16777215
    50413 <- 16777215
    50414 <- 16777215
    50415 <- 16777215
    50416 <- 16777215
    50417 <- 16777215
    50418 <- 16711680
    50419 <- 16711680
    50420 <- 16711680
    50421 <- 16711680
    50422 <- 16711680
    50423 <- 16711680
    50424 <- 16711680
    50425 <- 16711680
    50426 <- 16711680
    50427 <- 16711680
    50428 <- 16711680
    50429 <- 16711680
    50430 <- 16711680
    50431 <- 16711680
    50432 <- 16711680
    50433 <- 16711680
    50434 <- 986895
    50435 <- 986895
    50436 <- 16777215
    50437 <- 986895
    50438 <- 986895
    50439 <- 986895
    50440 <- 986895
    50441 <- 986895
    50442 <- 16777215
    50443 <- 16777215
    50444 <- 16777215
    50445 <- 16777215
    50446 <- 16777215
    50447 <- 16777215
    50448 <- 16777215
    50449 <- 16777215
    50450 <- 16711680
    50451 <- 16711680
    50452 <- 16711680
    50453 <- 16711680
    50454 <- 16711680
    50455 <- 16711680
    50456 <- 16711680
    50457 <- 16711680
    50458 <- 16711680
    50459 <- 16711680
    50460 <- 16711680
    50461 <- 16711680
    50462 <- 16711680
    50463 <- 16711680
    50464 <- 16711680
    50465 <- 16711680
    50466 <- 986895
    50467 <- 986895
    50468 <- 986895
    50469 <- 16777215
    50470 <- 986895
    50471 <- 986895
    50472 <- 986895
    50473 <- 986895
    50474 <- 16777215
    50475 <- 16777215
    50476 <- 16777215
    50477 <- 16777215
    50478 <- 16777215
    50479 <- 16777215
    50480 <- 16777215
    50481 <- 16777215
    50482 <- 16711680
    50483 <- 16711680
    50484 <- 16711680
    50485 <- 16711680
    50486 <- 16711680
    50487 <- 16711680
    50488 <- 16711680
    50489 <- 16711680
    50490 <- 16711680
    50491 <- 16711680
    50492 <- 16711680
    50493 <- 16711680
    50494 <- 16711680
    50495 <- 16711680
    50496 <- 16711680
    50497 <- 16711680
    50498 <- 986895
    50499 <- 986895
    50500 <- 986895
    50501 <- 986895
    50502 <- 986895
    50503 <- 986895
    50504 <- 986895
    50505 <- 986895
    50506 <- 16777215
    50507 <- 16777215
    50508 <- 16777215
    50509 <- 16777215
    50510 <- 16777215
    50511 <- 16777215
    50512 <- 16777215
    50513 <- 16777215
    50514 <- 3947775
    50515 <- 3947775
    50516 <- 3947775
    50517 <- 3947775
    50518 <- 3947775
    50519 <- 3947775
    50520 <- 3947775
    50521 <- 3947775
    50522 <- 3947775
    50523 <- 3947775
    50524 <- 3947775
    50525 <- 3947775
    50526 <- 3947775
    50527 <- 3947775
    50528 <- 3947775
    50529 <- 3947775
    50530 <- 1044480
    50531 <- 1044480
    50532 <- 1044480
    50533 <- 1044480
    50534 <- 1044480
    50535 <- 1044480
    50536 <- 1044480
    50537 <- 1044480
    50538 <- 1044480
    50539 <- 1044480
    50540 <- 1044480
    50541 <- 1044480
    50542 <- 1044480
    50543 <- 1044480
    50544 <- 1044480
    50545 <- 1044480
    50546 <- 3947775
    50547 <- 3947775
    50548 <- 3947775
    50549 <- 3947775
    50550 <- 3947775
    50551 <- 3947775
    50552 <- 3947775
    50553 <- 3947775
    50554 <- 3947775
    50555 <- 3947775
    50556 <- 3947775
    50557 <- 3947775
    50558 <- 3947775
    50559 <- 3947775
    50560 <- 3947775
    50561 <- 3947775
    50562 <- 1044480
    50563 <- 1044480
    50564 <- 1044480
    50565 <- 1044480
    50566 <- 1044480
    50567 <- 1044480
    50568 <- 1044480
    50569 <- 1044480
    50570 <- 1044480
    50571 <- 1044480
    50572 <- 1044480
    50573 <- 1044480
    50574 <- 1044480
    50575 <- 1044480
    50576 <- 1044480
    50577 <- 1044480
    50578 <- 3947775
    50579 <- 3947775
    50580 <- 3947775
    50581 <- 3947775
    50582 <- 3947775
    50583 <- 3947775
    50584 <- 3947775
    50585 <- 3947775
    50586 <- 3947775
    50587 <- 3947775
    50588 <- 3947775
    50589 <- 3947775
    50590 <- 3947775
    50591 <- 3947775
    50592 <- 3947775
    50593 <- 3947775
    50594 <- 1044480
    50595 <- 1044480
    50596 <- 1044480
    50597 <- 1044480
    50598 <- 1044480
    50599 <- 1044480
    50600 <- 1044480
    50601 <- 1044480
    50602 <- 1044480
    50603 <- 1044480
    50604 <- 1044480
    50605 <- 1044480
    50606 <- 1044480
    50607 <- 1044480
    50608 <- 1044480
    50609 <- 1044480
    50610 <- 3947775
    50611 <- 3947775
    50612 <- 3947775
    50613 <- 3947775
    50614 <- 3947775
    50615 <- 3947775
    50616 <- 3947775
    50617 <- 3947775
    50618 <- 3947775
    50619 <- 3947775
    50620 <- 3947775
    50621 <- 3947775
    50622 <- 3947775
    50623 <- 3947775
    50624 <- 3947775
    50625 <- 3947775
    50626 <- 1044480
    50627 <- 1044480
    50628 <- 1044480
    50629 <- 1044480
    50630 <- 1044480
    50631 <- 1044480
    50632 <- 1044480
    50633 <- 1044480
    50634 <- 1044480
    50635 <- 1044480
    50636 <- 1044480
    50637 <- 1044480
    50638 <- 1044480
    50639 <- 1044480
    50640 <- 1044480
    50641 <- 1044480
    50642 <- 3947775
    50643 <- 3947775
    50644 <- 3947775
    50645 <- 3947775
    50646 <- 3947775
    50647 <- 3947775
    50648 <- 3947775
    50649 <- 3947775
    50650 <- 3947775
    50651 <- 3947775
    50652 <- 3947775
    50653 <- 3947775
    50654 <- 3947775
    50655 <- 3947775
    50656 <- 3947775
    50657 <- 3947775
    50658 <- 1044480
    50659 <- 1044480
    50660 <- 1044480
    50661 <- 1044480
    50662 <- 1044480
    50663 <- 1044480
    50664 <- 1044480
    50665 <- 1044480
    50666 <- 1044480
    50667 <- 1044480
    50668 <- 1044480
    50669 <- 1044480
    50670 <- 1044480
    50671 <- 1044480
    50672 <- 1044480
    50673 <- 1044480
    50674 <- 3947775
    50675 <- 3947775
    50676 <- 3947775
    50677 <- 3947775
    50678 <- 3947775
    50679 <- 3947775
    50680 <- 3947775
    50681 <- 3947775
    50682 <- 3947775
    50683 <- 3947775
    50684 <- 3947775
    50685 <- 3947775
    50686 <- 3947775
    50687 <- 3947775
    50688 <- 3947775
    50689 <- 3947775
    50690 <- 1044480
    50691 <- 1044480
    50692 <- 1044480
    50693 <- 1044480
    50694 <- 1044480
    50695 <- 1044480
    50696 <- 1044480
    50697 <- 1044480
    50698 <- 1044480
    50699 <- 1044480
    50700 <- 1044480
    50701 <- 1044480
    50702 <- 1044480
    50703 <- 1044480
    50704 <- 1044480
    50705 <- 1044480
    50706 <- 3947775
    50707 <- 3947775
    50708 <- 3947775
    50709 <- 3947775
    50710 <- 3947775
    50711 <- 3947775
    50712 <- 3947775
    50713 <- 3947775
    50714 <- 3947775
    50715 <- 3947775
    50716 <- 3947775
    50717 <- 3947775
    50718 <- 3947775
    50719 <- 3947775
    50720 <- 3947775
    50721 <- 3947775
    50722 <- 1044480
    50723 <- 1044480
    50724 <- 1044480
    50725 <- 1044480
    50726 <- 1044480
    50727 <- 1044480
    50728 <- 1044480
    50729 <- 1044480
    50730 <- 1044480
    50731 <- 1044480
    50732 <- 1044480
    50733 <- 1044480
    50734 <- 1044480
    50735 <- 1044480
    50736 <- 1044480
    50737 <- 1044480
    50738 <- 3947775
    50739 <- 3947775
    50740 <- 3947775
    50741 <- 3947775
    50742 <- 3947775
    50743 <- 3947775
    50744 <- 3947775
    50745 <- 3947775
    50746 <- 3947775
    50747 <- 3947775
    50748 <- 3947775
    50749 <- 3947775
    50750 <- 3947775
    50751 <- 3947775
    50752 <- 3947775
    50753 <- 3947775
    50754 <- 1044480
    50755 <- 1044480
    50756 <- 1044480
    50757 <- 1044480
    50758 <- 1044480
    50759 <- 1044480
    50760 <- 1044480
    50761 <- 1044480
    50762 <- 1044480
    50763 <- 1044480
    50764 <- 1044480
    50765 <- 1044480
    50766 <- 1044480
    50767 <- 1044480
    50768 <- 1044480
    50769 <- 1044480
    50770 <- 3947775
    50771 <- 3947775
    50772 <- 3947775
    50773 <- 3947775
    50774 <- 3947775
    50775 <- 3947775
    50776 <- 3947775
    50777 <- 3947775
    50778 <- 3947775
    50779 <- 3947775
    50780 <- 3947775
    50781 <- 3947775
    50782 <- 3947775
    50783 <- 3947775
    50784 <- 3947775
    50785 <- 3947775
    50786 <- 1044480
    50787 <- 1044480
    50788 <- 1044480
    50789 <- 1044480
    50790 <- 1044480
    50791 <- 1044480
    50792 <- 1044480
    50793 <- 1044480
    50794 <- 1044480
    50795 <- 1044480
    50796 <- 1044480
    50797 <- 1044480
    50798 <- 1044480
    50799 <- 1044480
    50800 <- 1044480
    50801 <- 1044480
    50802 <- 3947775
    50803 <- 3947775
    50804 <- 3947775
    50805 <- 3947775
    50806 <- 3947775
    50807 <- 3947775
    50808 <- 3947775
    50809 <- 3947775
    50810 <- 3947775
    50811 <- 3947775
    50812 <- 3947775
    50813 <- 3947775
    50814 <- 3947775
    50815 <- 3947775
    50816 <- 3947775
    50817 <- 3947775
    50818 <- 1044480
    50819 <- 1044480
    50820 <- 1044480
    50821 <- 1044480
    50822 <- 1044480
    50823 <- 1044480
    50824 <- 1044480
    50825 <- 1044480
    50826 <- 1044480
    50827 <- 1044480
    50828 <- 1044480
    50829 <- 1044480
    50830 <- 1044480
    50831 <- 1044480
    50832 <- 1044480
    50833 <- 1044480
    50834 <- 3947775
    50835 <- 3947775
    50836 <- 3947775
    50837 <- 3947775
    50838 <- 3947775
    50839 <- 3947775
    50840 <- 3947775
    50841 <- 3947775
    50842 <- 3947775
    50843 <- 3947775
    50844 <- 3947775
    50845 <- 3947775
    50846 <- 3947775
    50847 <- 3947775
    50848 <- 3947775
    50849 <- 3947775
    50850 <- 1044480
    50851 <- 1044480
    50852 <- 1044480
    50853 <- 1044480
    50854 <- 1044480
    50855 <- 1044480
    50856 <- 1044480
    50857 <- 1044480
    50858 <- 1044480
    50859 <- 1044480
    50860 <- 1044480
    50861 <- 1044480
    50862 <- 1044480
    50863 <- 1044480
    50864 <- 1044480
    50865 <- 1044480
    50866 <- 3947775
    50867 <- 3947775
    50868 <- 3947775
    50869 <- 3947775
    50870 <- 3947775
    50871 <- 3947775
    50872 <- 3947775
    50873 <- 3947775
    50874 <- 3947775
    50875 <- 3947775
    50876 <- 3947775
    50877 <- 3947775
    50878 <- 3947775
    50879 <- 3947775
    50880 <- 3947775
    50881 <- 3947775
    50882 <- 1044480
    50883 <- 1044480
    50884 <- 1044480
    50885 <- 1044480
    50886 <- 1044480
    50887 <- 1044480
    50888 <- 1044480
    50889 <- 1044480
    50890 <- 1044480
    50891 <- 1044480
    50892 <- 1044480
    50893 <- 1044480
    50894 <- 1044480
    50895 <- 1044480
    50896 <- 1044480
    50897 <- 1044480
    50898 <- 3947775
    50899 <- 3947775
    50900 <- 3947775
    50901 <- 3947775
    50902 <- 3947775
    50903 <- 3947775
    50904 <- 3947775
    50905 <- 3947775
    50906 <- 3947775
    50907 <- 3947775
    50908 <- 3947775
    50909 <- 3947775
    50910 <- 3947775
    50911 <- 3947775
    50912 <- 3947775
    50913 <- 3947775
    50914 <- 1044480
    50915 <- 1044480
    50916 <- 1044480
    50917 <- 1044480
    50918 <- 1044480
    50919 <- 1044480
    50920 <- 1044480
    50921 <- 1044480
    50922 <- 1044480
    50923 <- 1044480
    50924 <- 1044480
    50925 <- 1044480
    50926 <- 1044480
    50927 <- 1044480
    50928 <- 1044480
    50929 <- 1044480
    50930 <- 3947775
    50931 <- 3947775
    50932 <- 3947775
    50933 <- 3947775
    50934 <- 3947775
    50935 <- 3947775
    50936 <- 3947775
    50937 <- 3947775
    50938 <- 3947775
    50939 <- 3947775
    50940 <- 3947775
    50941 <- 3947775
    50942 <- 3947775
    50943 <- 3947775
    50944 <- 3947775
    50945 <- 3947775
    50946 <- 1044480
    50947 <- 1044480
    50948 <- 1044480
    50949 <- 1044480
    50950 <- 1044480
    50951 <- 1044480
    50952 <- 1044480
    50953 <- 1044480
    50954 <- 1044480
    50955 <- 1044480
    50956 <- 1044480
    50957 <- 1044480
    50958 <- 1044480
    50959 <- 1044480
    50960 <- 1044480
    50961 <- 1044480
    50962 <- 3947775
    50963 <- 3947775
    50964 <- 3947775
    50965 <- 3947775
    50966 <- 3947775
    50967 <- 3947775
    50968 <- 3947775
    50969 <- 3947775
    50970 <- 3947775
    50971 <- 3947775
    50972 <- 3947775
    50973 <- 3947775
    50974 <- 3947775
    50975 <- 3947775
    50976 <- 3947775
    50977 <- 3947775
    50978 <- 1044480
    50979 <- 1044480
    50980 <- 1044480
    50981 <- 1044480
    50982 <- 1044480
    50983 <- 1044480
    50984 <- 1044480
    50985 <- 1044480
    50986 <- 1044480
    50987 <- 1044480
    50988 <- 1044480
    50989 <- 1044480
    50990 <- 1044480
    50991 <- 1044480
    50992 <- 1044480
    50993 <- 1044480
    50994 <- 3947775
    50995 <- 3947775
    50996 <- 3947775
    50997 <- 3947775
    50998 <- 3947775
    50999 <- 3947775
    51000 <- 3947775
    51001 <- 3947775
    51002 <- 3947775
    51003 <- 3947775
    51004 <- 3947775
    51005 <- 3947775
    51006 <- 3947775
    51007 <- 3947775
    51008 <- 3947775
    51009 <- 3947775
    51010 <- 1044480
    51011 <- 1044480
    51012 <- 1044480
    51013 <- 1044480
    51014 <- 1044480
    51015 <- 1044480
    51016 <- 1044480
    51017 <- 1044480
    51018 <- 1044480
    51019 <- 1044480
    51020 <- 1044480
    51021 <- 1044480
    51022 <- 1044480
    51023 <- 1044480
    51024 <- 1044480
    51025 <- 1044480
endefine

// ------------------------------------------------------------------
// SoC sub-units management
// ------------------------------------------------------------------

systemwait:
x1 = 100001
x2 = mem[x1 + 0] // read button[0] request
x3 = 1
x3 == x2 goto Main // start main function
x0 == x0 goto systemwait

// Main function
Main:
// ------------------------------------------------------------------
// RegFile Work Aera 1: Re-Order Minimum coded (MCU)
// Avialiable register remaind: x23
// ------------------------------------------------------------------
// blocks: 1216 Y 1280 U 1344 V 1408 Block 1472 MidBlock
x20 = 50000
x21 = 2000
x28 = mem[x20 + 0]
x29 = mem[x20 + 1]
mem[x0 + 1187] = x28
mem[x0 + 1188] = x29
x1 = 4
x28 = x28 >> x1
x27 = x29 >> x1
mem[x0 + 1189] = x28
mem[x0 + 1190] = x27

x1 = 0
x2 = 0
x3 = 0
x4 = 0
x5 = 0
x6 = 0
x26 = 16
x25 = 8
x24 = 2

while x2 != x28,
    x10 = x26 *l x29
    x10 = x10 *l x2
    x10 = x10 + 2
    while x1 != x27,
        x11 = x26 *l x1
        x11 = x11 + x10
        while x4 != x24,
            x12 = x25 *l x29
            x12 = x12 *l x4 
            x12 = x12 + x11
            while x3 != x24,
                x13 = x25 *l x3
                x13 = x13 + x12
                while x5 != x25,
                    x14 = x5 + x13
                    while x6 != x25,
                        x15 = x29 *l x6
                        x15 = x15 + x14
                        x15 = x20 + x15
                        x19 = 255 + x0
                        x16 = mem[x15 + 0] // uart[x15]
                        x16 = x16 >> x26
                        x16 = x16 & x19
                        x17 = mem[x15 + 0] // uart[x15]
                        x17 = x17 >> x25
                        x17 = x17 & x19
                        x18 = mem[x15 + 0] // uart[x15]
                        x18 = x18 & x19
                        x19 = mem[x0 + 1208]
                        x19 = x19 *h x16
                        x30 = mem[x0 + 1209]
                        x30 = x30 *h x17
                        x19 = x19 + x30
                        x30 = mem[x0 + 1210]
                        x30 = x30 *h x18
                        x19 = x19 + x30
                        x19 = x19 + 16
                        x22 = x19 + 0  // Y
                        x19 = mem[x0 + 1211]
                        x19 = x19 *h x16
                        x30 = mem[x0 + 1212]
                        x30 = x30 *h x17
                        x19 = x19 + x30
                        x30 = mem[x0 + 1213]
                        x30 = x30 *h x18
                        x19 = x19 + x30
                        x19 = x19 + 128
                        x19 = x19 << x25
                        x22 = x19 + x22 // Cb
                        x19 = mem[x0 + 1214]
                        x19 = x19 *h x17
                        x30 = mem[x0 + 1213]
                        x30 = x30 *h x16 
                        x19 = x19 + x30
                        x30 = mem[x0 + 1215]
                        x30 = x30 *h x18
                        x19 = x19 + x30
                        x19 = x19 + 128
                        x19 = x19 << x26
                        x22 = x19 + x22 // Cr
                        mem[x21 + 0] = x22
                        x21 = x21 + 1

                        x6 = x6 + 1
                    endwhile
                    x6 = 0 + x0
                    x5 = x5 + 1
                endwhile
                x5 = 0 + x0
                x3 = x3 + 1
            endwhile
            x3 = 0 + x0
            x4 = x4 + 1
        endwhile
        x4 = 0 + x0
        x1 = x1 + 1
    endwhile
    x1 = 0 + x0
    x2 = x2 + 1
endwhile

// clear pixel bit map
x10 = 50000
x11 = 100000
while x10 != x11,
    mem[x10 + 0] = x0
    x10 = x10 + 1
endwhile

// ------------------------------------------------------------------
// RegFile Work Aera 2: Block Process and Huffman endcode
// ------------------------------------------------------------------

// Function used regiters
x26 = 32 // Huffman code stack space very 32 bit
x25 = 50000 // start from here to save Huffman code
// x28 return key and mode
// x29 differential DC value

// Function Entry
x0 == x0 goto EndBlockProcess
BlockProcess:

// ------------------------------------
// 8x8 matrix subtraction: Sub Area 1
// ------------------------------------

x1 = 0 + x0
x2 = 64 + x0
while x1 != x2,
    x3 = mem[x1 + 1408]
    x3 = x3 + -128
    mem[x1 + 1472] = x3
    mem[x1 + 1408] = x0
    x1 = x1 + 1
endwhile

// ------------------------------------
// Discrete Cosine Transform: Sub Area 2
// ------------------------------------
// SubFunction: CORDIC cosine
x0 == x0 goto ENDCORDIC
CORDIC:
    x8 = 0 + x0
    x20 = 205887  // dust will help
    x21 = -411775 // dust will help
    x22 = 102944  // dust will help
    while x20 < x9, 
        x9 = x9 + x21
    endwhile
    if x22 < x9,
        x8 = 1 + x0
        x20 = x20 ^ -1
        x20 = x20 + 1
        x9 = x9 + x20
        x0 == x0 goto endelse2
    endif
        x22 = x22 ^ -1 
        x22 = x22 + 1
        if x9 < x22,
            x8 = 1 + x0
            x9 = x9 + x20
        endif
    endelse2:
    x10 = 0 + x0
    mem[x0 + 1191] = x0
    mem[x0 + 1192] = x0
    mem[x0 + 1193] = x0
    mem[x0 + 1194] = x0
    mem[x0 + 1195] = x0
    mem[x0 + 1196] = x0
    mem[x0 + 1197] = x0
    x7 = 0 + x0
    x22 = 7 + x0
    while x7 != x22,
        if x9 < x10,
            x20 = mem[x7 + 1180]
            x20 = x20 ^ -1
            x20 = x20 + 1
            x10 = x10 + x20
            x21 = 1 + x0
            mem[x7 + 1191] = x21
            x0 == x0 goto endelse3
        endif
            x20 = mem[x7 + 1180]
            x10 = x10 + x20
            mem[x7 + 1191] = x0
        endelse3:
        x7 = x7 + 1
    endwhile
    x1 = 39797 // dust will help
    x2 = 0 + x0
    x7 = 6 + x0
    x21 = 1 + x0
    x23 = -1 + x0
    while x7 != x23,
        x20 = mem[x7 + 1191]
        x22 = x2 >> x7
        if x20 == x21,
            x22 = x22 ^ -1
            x22 = x22 + 1
            x1 = x1 + x22
            x22 = x1 >> x7
            x0 == x0 goto endelse4
        endif
            x1 = x1 + x22
            x22 = x1 >> x7
            x22 = x22 ^ -1
            x22 = x22 + 1
        endelse4:
        x2 = x22 + x2
        x7 = x7 + -1
    endwhile
    if x8 == x21,
        x1 = x1 ^ -1
        x1 = x1 + 1
    endif
// CORDIC return gate
// return key: x24
x21 = 1 + x0
x24 == x0 goto CORDICGate0
x24 == x21 goto CORDICGate1
ENDCORDIC:

// DCT
x15 = 8 + x0
x17 = 2 + x0
x3 = 0 + x0
x4 = 0 + x0
x5 = 0 + x0
x6 = 0 + x0
while x3 != x15,
    if x3 == x0,
        x11 = mem[x0 + 1198]
        x0 == x0 goto endelse5
    endif
        x11 = mem[x0 + 1199]
    endelse5:
    while x4 != x15,
        if x4 == x0,
            x12 = mem[x0 + 1198]
            x0 == x0 goto endelse6
        endif
            x12 = mem[x0 + 1199]
        endelse6:
        x14 = 0 + x0
        while x5 != x15,
            while x6 != x15,
                x16 = x5 *l x15
                x16 = x16 + x6
                x13 = mem[x16 + 1472]
                x9 = x17 *l x5
                x9 = x9 + 1
                x9 = x9 *l x3
                x23 = mem[x0 + 1200]
                x9 = x9 *l x23
                x24 = 0 + x0 // return key
                x0 == x0 goto CORDIC // call function
                CORDICGate0: // return gate
                x13 = x13 *l x1
                x13 = x13 >> x15
                x9 = x17 *l x6
                x9 = x9 + 1
                x9 = x9 *l x4
                x23 = mem[x0 + 1200]
                x9 = x9 *l x23
                x24 = 1 + x0// return key
                x0 == x0 goto CORDIC // call function
                CORDICGate1: // return gate
                x13 = x13 *l x1
                x13 = x13 >> x15
                x14 = x14 + x13
                x6 = x6 + 1
            endwhile
            x6 = 0 + x0
            x5 = x5 + 1
        endwhile
        x16 = x11 *h x12
        x13 = x11 *l x12
        x21 = 2147483647 // dust will help
        x13 = x13 & x21
        x18 = 15 + x0
        x16 = x16 << x18
        x18 = x18 + 1
        x13 = x13 >> x18
        x13 = x13 | x16
        x13 = x13 *h x14
        x18 = 3 + x0
        x13 = x13 >> x18
        if x13 != x0,
            x13 = x13 + 1
        endif
        x16 = x3 *l x15
        x16 = x4 + x16
        mem[x16 + 1408] = x13
        x5 = 0 + x0
        x4 = x4 + 1
    endwhile
    x4 = 0 + x0
    x3 = x3 + 1
endwhile

// ------------------------------------
// Quantization: Sub Area 3
// ------------------------------------

x2 = 1052 + x0
if x28 == x0,
    x2 = 1116 + x0
endif
x1 = 0 + x0
x5 = 64 + x0 
x7 = 16 + x0
while x1 != x5,
    x6 = x1 + x2
    x3 = mem[x6 + 0]
    x4 = mem[x1 + 1408]
    x3 = x3 *l x4
    x3 = x3 >> x7
    mem[x1 + 1408] = x0
    mem[x1 + 1472] = x3
    x1 = x1 + 1
endwhile

// ------------------------------------
// Zigzag Scan: Sub Area 4
// ------------------------------------

x1 = 0 + x0
x2 = 0 + x0
x5 = 0 + x0
x3 = 1 + x0
x4 = 0 + x0
x6 = 7 + x0
x7 = 8 + x0
x9 = 1 + x0
// Differential DC Value:
x29 = mem[x28 + 1204]
x27 = mem[x0 + 1472]
x29 = x29 ^ -1
x29 = x29 + 1
x11 = x27 + x29
mem[x28 + 1204] = x27
mem[x0 + 1408] = x11
while x0 == x0,
    // special if structure
    x1 == x0 goto iformark0
    x1 == x6 goto iformark0
    x0 == x0 goto endiformark0
    iformark0:
        x2 = x2 + 1
        x4 = 1 + x0
        x0 == x0 goto endelseifmark0
    endiformark0:
    x2 == x0 goto iformark1
    x2 == x6 goto iformark1
    x0 == x0 goto endelseifmark0
    iformark1:
        x1 = x1 + 1
        x4 = 1 + x0
    endelseifmark0:
    if x4 == x9,
        x4 = 0 + x0
        x3 = x3 ^ -1
        x3 = x3 + 1
        x5 = x5 + 1
        x12 = x2 *l x7
        x12 = x12 + x1
        x11 = mem[x12 + 1472]
        mem[x5 + 1408] = x11
    endif
    // if x1 == x6 and x2 == x6:
    x2 != x6 goto ifandmark0
    x1 != x6 goto ifandmark0
        x0 == x0 goto breakmark0
    ifandmark0:
    x5  = x5  + 1
    x13 = x3  ^ -1
    x13 = x13 + 1
    x1  = x13 + x1
    x2  = x2  + x3
    x12 = x2 *l x7
    x12 = x12 + x1
    x11 = mem[x12 + 1472]
    mem[x5 + 1408] = x11
endwhile
breakmark0:

// ------------------------------------
// Huffman Encode: Sub Area 6
// ------------------------------------

// 0 for Luminace
if x28 == x0,
    x10 = 0 + x0
    x11 = 12 + x0
    x12 = 24 + x0
    x13 = 275 + x0
    x0 == x0 goto endelse7
endif
    x10 = 526 + x0
    x11 = 538 + x0
    x12 = 550 + x0
    x13 = 801 + x0
endelse7:

// SubFunction: Get data and size
x0 == x0 goto EndGetDataAndSize
GetDataAndSize:
    x14 = 0 + x0
    x15 = 0 + x0
    x17 = 1 + x0
    if x1 < x0, // x1: data < 0 then -x1
        x1 = x1 ^ -1
        x1 = x1 + 1
        x15 = 1 + x0 // less than 1 flag
    endif
    x2 = x1 + 0 // x2: data
    while x1 != x0,
        x1 = x1 >> x17 // x1 >> 1
        x14 = x14 + 1
    endwhile
    x3 = x14 + 0
    if x15 == x17,
        x16 = 0 + x0
        while x14 != x0,
            x16 = x16 << x17
            x16 = x16 + 1
            x14 = x14 + -1
        endwhile
        x2 = x2 ^ -1
        x2 = x2 & x16
    endif

// Get data and size return gate
// return key: x24
x19 = 1 + x0
x24 == x0 goto GetDataAndSizeReturnGate0
x24 == x19 goto GetDataAndSizeReturnGate1
EndGetDataAndSize:

// SubFunction: Push Huffman bit stack
x0 == x0 goto EndPushHuffmanBitStack
PushHuffmanBitStack:
    x14 = mem[x25 + 0]
    if x26 >= x5, // stack spave >= push size
        x5 = x5 ^ -1
        x5 = x5 + 1
        x18 = x26 + x5
        x18 = x4 << x18 // push data
        x14 = x14 + x18
        mem[x25 + 0] = x14
        x26 = x26 + x5
        x0 == x0 goto endelse8
    endif
        x19 = x26 ^ -1
        x19 = x19 + 1
        x18 = x5 + x19 // push size - stack space
        x18 = x4 >> x18 // push data >> 
        x14 = x14 | x18 // last data | push data
        mem[x25 + 0] = x14 // fill the former space
        x5 = x5 + x19 // rest push size
        x15 = x5 + 0
        x16 = 0 + x0
        x19 = x0 + 1
        while x15 != x0,
            x16 = x16 << x19
            x16 = x16 + 1
            x15 = x15 + -1
        endwhile
        x16 = x16 & x4 // trim the push data
        x19 = x5 ^ -1
        x19 = x19 + 1
        x26 = 32 + x19 // rest space
        x17 = x16 << x26 // new data
        x25 = x25 + 1
        mem[x25 + 0] = x17
    endelse8:

// Push Huffman bit stack return gate
// return key: x23
x19 = 1 + x0
x18 = 2 + x0
x5 = 3 + x0
x23 == x0 goto PushHuffmanBitStackReturnGate0
x23 == x19 goto PushHuffmanBitStackReturnGate1
x23 == x18 goto PushHuffmanBitStackReturnGate2
x23 == x5 goto PushHuffmanBitStackReturnGate3
EndPushHuffmanBitStack:

// DC
x1 = mem[x0 + 1408]
x24 = x0 + 0
x0 == x0 goto GetDataAndSize
GetDataAndSizeReturnGate0:
x14 = x10 + x3
x6 = mem[x14 + 0]
x14 = x11 + x3
x7 = mem[x14 + 0]
x4 = x6 << x3
x4 = x4 + x2
x5 = x3 + x7
x23 = x0 + 0
x0 == x0 goto PushHuffmanBitStack
PushHuffmanBitStackReturnGate0:

// AC
x9 = 0 + x0
x20 = 1 + x0
x21 = 64 + x0
x22 = 15 + x0
while x20 != x21,
    x15 = mem[x20 + 1408]
    if x15 == x0,
        x9 = x9 + 1
        x0 == x0 goto endelse9
    endif
        while x22 < x9, // zeros over than 15
            x9 = x9 + -16
            x4 = mem[x12 + 240]
            x5 = mem[x13 + 240]
            x23 = x0 + 1
            x0 == x0 goto PushHuffmanBitStack
            PushHuffmanBitStackReturnGate1:
        endwhile
        // Assembly
        x1 = mem[x20 + 1408]
        x24 = x0 + 1
        x0 == x0 goto GetDataAndSize
        GetDataAndSizeReturnGate1:
        x17 = 4
        x8 = x9 << x17
        x8 = x8 + x3
        x14 = x12 + x8
        x6 = mem[x14 + 0]
        x14 = x13 + x8
        x7 = mem[x14 + 0]
        x4 = x6 << x3
        x4 = x4 + x2
        x5 = x3 + x7
        x23 = x0 + 2
        x0 == x0 goto PushHuffmanBitStack
        PushHuffmanBitStackReturnGate2:
        x9 = 0 + x0
    endelse9:
    x20 = x20 + 1
endwhile

// EOB
if x9 != x0,
    x4 = mem[x12 + 0]
    x5 = mem[x13 + 0]
    x23 = x0 + 3
    x0 == x0 goto PushHuffmanBitStack
    PushHuffmanBitStackReturnGate3:
endif

// ------------------------------------
// Function Return Gate
// ------------------------------------

x1 = 0 + x0
x2 = 1 + x0
x3 = 2 + x0
x28 == x1 goto BlockProcessReturnGate0
x28 == x2 goto BlockProcessReturnGate1
x28 == x3 goto BlockProcessReturnGate2
EndBlockProcess:

// ------------------------------------------------------------------
// RegFile Work Aera 3: Sampling
// ------------------------------------------------------------------

mem[x0 + 1201] = x0
mem[x0 + 1202] = x0
mem[x0 + 1203] = x0
mem[x0 + 1204] = x0
mem[x0 + 1205] = x0
mem[x0 + 1206] = x0
x1 = 256 + x0 // 16 * 16
x2 = mem[x0 + 1189]
x1 = x1 *l x2
x2 = mem[x0 + 1190]
x4 = x1 *l x2
mem[x0 + 1207] = x4
x1 = 0 + x0
x2 = 0 + x0
x3 = 0 + x0

while x1 != x4,
    x6 = mem[x1 + 2000]
    x10 = 255 + x0
    x11 = 8 + x0
    x12 = 16 + x0
    x6 = x10 & x6
    mem[x2 + 1216] = x6
    x6 = mem[x1 + 2000]
    x6 = x6 >> x11
    x6 = x6 & x10
    x7 = mem[x2 + 1280]
    x6 = x6 + x7
    mem[x2 + 1280] = x6
    x6 = mem[x1 + 2000]
    x7 = mem[x2 + 1344]
    x6 = x6 >> x12
    x6 = x6 & x10
    x6 = x6 + x7
    mem[x2 + 1344] = x6
    x6 = 63 + x0
    if x2 == x6,
        mem[x0 + 1201] = x1
        mem[x0 + 1203] = x3
        x6 = 64 + x0
        x7 = 0 + x0
        while x7 != x6,
            x9 = mem[x7 + 1216]
            mem[x7 + 1408] = x9
            x7 = x7 + 1
        endwhile
        x28 = 0 + x0// return key
        x0 == x0 goto BlockProcess // Call function
        BlockProcessReturnGate0: // Return Gate 0
        x3 = mem[x0 + 1203]
        x8 = 3 + x0
        if x3 == x8,
            x6 = 64 + x0
            x7 = 0 + x0
            while x7 != x6,
                x9 = mem[x7 + 1280]
                x5 = 2 + x0
                x9 = x9 >> x5
                mem[x7 + 1408] = x9
                x7 = x7 + 1
            endwhile
            x28 = 1 + x0 // return key
            x0 == x0 goto BlockProcess // Call function
            BlockProcessReturnGate1: // Return Gate 1
            x6 = 64 + x0
            x7 = 0 + x0
            while x7 != x6,
                x9 = mem[x7 + 1344]
                x5 = 2 + x0
                x9 = x9 >> x5
                mem[x7 + 1408] = x9
                x7 = x7 + 1
            endwhile
            x28 = 2 + x0 // return key
            x0 == x0 goto BlockProcess // Call function
            BlockProcessReturnGate2: // Return Gate 2
            x6 = 64 + x0
            x7 = 0 + x0
            while x7 != x6,
                mem[x7 + 1280] = x0
                mem[x7 + 1344] = x0
                x7 = x7 + 1
            endwhile
            x3 = 0 + x0
            x0 == x0 goto endelse0
        endif
            x3 = x3 + 1
        endelse0:
        x2 = 0 + x0
        x1 = mem[x0 + 1201]
        x4 = mem[x0 + 1207]
        x0 == x0 goto endelse1
    endif
        x2 = x2 + 1
    endelse1:
    x1 = x1 + 1
endwhile

// ------------------------------------------------------------------
// RegFile Work Aera 4: Post Process
// ------------------------------------------------------------------

x13 = 0
x1 = 1
while x26 != x0,
    x13 = x13 << x1
    x13 = x13 + 1
    x26 = x26 + -1
endwhile
x2 = mem[x25 + 0]
x13 = x13 + x2
mem[x25 + 0] = x13

// stop here, forever loop
EndOfProgram:
x0 == x0 goto EndOfProgram
